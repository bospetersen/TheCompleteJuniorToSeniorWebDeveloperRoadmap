{"version":3,"sources":["logo.svg","Components/Page1.js","Components/Page2.js","Components/Page3.js","App.js","registerServiceWorker.js","index.js"],"names":["Page1","onRouteChange","className","src","logo","alt","onClick","Page2","Page3","App","route","setState","state","this","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6MAAe,G,MAAA,IAA0B,kC,OCc1BA,EAXD,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAH,OACZ,sBAAKC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,oBAAIH,UAAU,YAAd,kCAEF,wBAAQA,UAAU,WAAlB,mBACA,wBAAQI,QAAS,kBAAML,EAAc,UAArC,mBACA,wBAAQK,QAAS,kBAAML,EAAc,UAArC,uBCqBWM,EA5BD,SAAC,GAAD,IAAGN,EAAH,EAAGA,cAAH,OACZ,sBAAKC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,oBAAIH,UAAU,YAAd,kCAEF,wBAAQI,QAAS,kBAAML,EAAc,UAArC,mBACA,wBAAQC,UAAU,WAAlB,mBACA,wBAAQI,QAAS,kBAAML,EAAc,UAArC,uBCEWO,EAXD,SAAC,GAAD,IAAGP,EAAH,EAAGA,cAAH,OACZ,sBAAKC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,oBAAIH,UAAU,YAAd,kCAEF,wBAAQI,QAAS,kBAAML,EAAc,UAArC,mBACA,wBAAQK,QAAS,kBAAML,EAAc,UAArC,mBACA,wBAAQC,UAAU,WAAlB,uBC8DWO,E,kDA9Db,aAAe,IAAD,8BACZ,gBAOFR,cAAgB,SAACS,GAEf,EAAKC,SAAS,CAAED,MAAOA,KARvB,EAAKE,MAAQ,CACXF,MAAO,SAHG,E,0CA+Bd,WAEE,MAAyB,UAArBG,KAAKD,MAAMF,MACN,cAAC,EAAD,CAAOT,cAAeY,KAAKZ,gBACJ,UAArBY,KAAKD,MAAMF,MACb,cAAC,EAAD,CAAOT,cAAeY,KAAKZ,gBAE3B,cAAC,EAAD,CAAOA,cAAeY,KAAKZ,oB,GAvCtBa,aCAZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjB,QACfW,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCzEjEC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,GAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,GAAN,sBAEP3B,IAiDV,SAAiCO,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BT,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEArEAoB,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjCO,QAAQC,IACN,gHAMJb,EAAgBC,OCzCxBiC,K","file":"static/js/main.bb65a00a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import React from 'react';\r\nimport logo from '../logo.svg';\r\n\r\nconst Page1 = ({ onRouteChange }) =>\r\n  <div className=\"App\">\r\n    <header className=\"App-header\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <h1 className=\"App-title\">Welcome to Page 1</h1>\r\n    </header>\r\n    <button className='disabled'>Page1</button>\r\n    <button onClick={() => onRouteChange('page2')}>Page2</button>\r\n    <button onClick={() => onRouteChange('page3')}>Page3</button>\r\n  </div>\r\n\r\nexport default Page1;","import React from 'react';\r\nimport logo from '../logo.svg';\r\n// import Particles from 'react-particles-js';\r\n\r\nconst Page2 = ({ onRouteChange }) =>\r\n  <div className=\"App\">\r\n    <header className=\"App-header\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <h1 className=\"App-title\">Welcome to Page 2</h1>\r\n    </header>\r\n    <button onClick={() => onRouteChange('page1')}>Page1</button>\r\n    <button className='disabled'>Page2</button>\r\n    <button onClick={() => onRouteChange('page3')}>Page3</button>\r\n    {/*<Particles\r\n      params={{\r\n                particles: {\r\n                  line_linked: {\r\n                    shadow: {\r\n                      enable: true,\r\n                      color: \"#3CA9D1\",\r\n                      blur: 5\r\n                    }\r\n                  }\r\n                }\r\n              }}\r\n              style={{\r\n                width: '100%',\r\n                backgroundImage: `url(${logo})`\r\n              }}\r\n    />*/}\r\n  </div>\r\n\r\nexport default Page2;","import React from 'react';\r\nimport logo from '../logo.svg';\r\n\r\nconst Page3 = ({ onRouteChange }) =>\r\n  <div className=\"App\">\r\n    <header className=\"App-header\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <h1 className=\"App-title\">Welcome to Page 3</h1>\r\n    </header>\r\n    <button onClick={() => onRouteChange('page1')}>Page1</button>\r\n    <button onClick={() => onRouteChange('page2')}>Page2</button>\r\n    <button className='disabled'>Page3</button>\r\n  </div>\r\n\r\nexport default Page3;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport Page1 from './Components/Page1';\r\n// Part 1 - No Code Splitting\r\nimport Page2 from './Components/Page2';\r\nimport Page3 from './Components/Page3';\r\n// Part 3 - Cleaner Code Splitting\r\n// import AsyncComponent from './AsyncComponent';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      route: 'page1',\r\n      // Part 2 - Code Splitting - manual\r\n      // component: null\r\n    }\r\n  }\r\n  onRouteChange = (route) => {\r\n    // Part 1 - No Code Splitting\r\n    this.setState({ route: route });\r\n    // Part 2 - Code Splitting - manual\r\n    // if (route === 'page1') {\r\n    //   this.setState({ route: route })\r\n    // } else if (route === 'page2') {\r\n    //   import('./Components/Page2')\r\n    //     .then((Page2) => {\r\n    //       this.setState({ route: route, component: Page2.default })\r\n    //     })\r\n    //     .catch(err => {\r\n    //     });\r\n    // } else {\r\n    //   import('./Components/Page3')\r\n    //     .then((Page3) => {\r\n    //       this.setState({ route: route, component: Page3.default })\r\n    //     })\r\n    //     .catch(err => {\r\n    //       console.log(err)\r\n    //     });\r\n    // }\r\n  }\r\n  render() {\r\n    // Part 1 - No code splitting\r\n    if (this.state.route === 'page1') {\r\n      return <Page1 onRouteChange={this.onRouteChange} />\r\n    } else if (this.state.route === 'page2') {\r\n      return <Page2 onRouteChange={this.onRouteChange} />\r\n    } else {\r\n      return <Page3 onRouteChange={this.onRouteChange} />\r\n    }\r\n\r\n    // Part 2 - No Code Splitting - manual\r\n    // if (this.state.route === 'page1') {\r\n    //   return <Page1 onRouteChange={this.onRouteChange} />\r\n    // } else {\r\n    //   return <this.state.component onRouteChange={this.onRouteChange} />\r\n    // }\r\n\r\n    // Part 3 - Cleaner Code Splitting\r\n    // if (this.state.route === 'page1') {\r\n    //   return <Page1 onRouteChange={this.onRouteChange} />\r\n    // } else if (this.state.route === 'page2') {\r\n    //   const AsyncPage2 = AsyncComponent(() => import(\"./Components/Page2\"));\r\n    //   return <AsyncPage2 onRouteChange={this.onRouteChange} />\r\n    // } else {\r\n    //   const AsyncPage3 = AsyncComponent(() => import(\"./Components/Page3\"));\r\n    //   return <AsyncPage3 onRouteChange={this.onRouteChange} />\r\n    // }\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}